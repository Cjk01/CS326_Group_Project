import { Source } from 'html-validate';
import { TransformContext } from 'html-validate';

/**
 * @public
 */
declare type Transformer_2 = (this: TransformContext, source: Source) => Iterable<Source>;
export { Transformer_2 as Transformer }

/**
 * Helper function to call a transformer function in test-cases.
 *
 * @public
 * @param fn - Transformer function to call.
 * @param filename - Filename to read data from. Must be readable.
 * @param chain - If set this function is called when chaining transformers. Default is pass-thru.
 */
export declare function transformFile(fn: Transformer_2, filename: string, chain?: (source: Source, filename: string) => Iterable<Source>): Source[];

/**
 * Helper function to call a transformer function in test-cases.
 *
 * @public
 * @param fn - Transformer function to call.
 * @param data - Source to transform.
 * @param chain - If set this function is called when chaining transformers. Default is pass-thru.
 */
export declare function transformSource(fn: Transformer_2, source: Source, chain?: (source: Source, filename: string) => Iterable<Source>): Source[];

/**
 * Helper function to call a transformer function in test-cases.
 *
 * @public
 * @param fn - Transformer function to call.
 * @param data - String to transform.
 * @param chain - If set this function is called when chaining transformers. Default is pass-thru.
 */
export declare function transformString(fn: Transformer_2, data: string, chain?: (source: Source, filename: string) => Iterable<Source>): Source[];

export { }
